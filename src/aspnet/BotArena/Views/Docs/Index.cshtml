@{
    ViewBag.Title = "Documentation";
}

@section styles {
    <link rel="stylesheet" href="@Url.Content("~/Content/Pages/Docs/Index.less")" />
}

<h2>Documentation</h2>

<p class="alert alert-warning">
    <i class="fa fa-warning"></i>
    The site is still in the beta stage so the API is subject for change.
    Feedback and ideas of ways to improve the API are more than welcome!
</p>

<h3>Table of Contents</h3>

<ul>
    <li><a href="#getting-started">Getting Started</a></li>
    <li><a href="#events">Events</a></li>
    <li><a href="#bot-status">Bot Status Object</a></li>
    <li><a href="#action-queue">Action Queue Object</a></li>
    <li><a href="#coordinate-system">Coordinate System and Angles</a></li>
    <li><a href="#debugging">Debugging your bot</a></li>
    <li><a href="#team-games">Team Games</a></li>
    <li><a href="#technical-details">Technical Details</a></li>
    <li><a href="#private-bots">Public and Private Bots</a></li>
    <li><a href="#game-performance">Game Performance (FPS)</a></li>
    <li><a href="#api">API Access</a></li>
</ul>

<h3 id="getting-started">Getting Started</h3>

<p>
    The first thing you have to do is to <a href="@Url.Action("Register", "User")">register</a> a GosuArena account.
    When you have done that you need to create a bot. You can create bots on you <a href="@Url.Action("MyProfile", "User")">profile page</a>.
    Your profile shows a list of all your bots. Click the one you want to edit and you will see a very basic editor where you can
    write your JavaScript code for your bot.
</p>

<p>
    The one thing you have to do to make GosuArena understand that you have a bot that wants to join the party is to call the gosuArena.register
    method, and specify a tick callback which GosuArena calls once per round during the game.
</p>

<p>
    Here is how to do it:
</p>

<pre class="prettyprint" id="getting-started-example">
    gosuArena.register({
        tick: function (actionQueue, status) {
    
            // Here is where your code goes...

            // For example, here is a super simple bot which just stands in the same spot, turns and shoots
            actionQueue.fire();
            actionQueue.turn(1);
        }
    });
</pre>

<p>
    You can read more about the tick method's parameters in the sections <a href="#action-queue">Action queue</a> and <a href="#bot-status">Bot status</a>.
</p>

<h3 id="events">Events</h3>

Your bot interacts with gosuArena through a couple of different events, and those events are described in this section.

<h4>Tick</h4>

<p>
    The tick event is the thing that drives the whole shebang. Each bot receives a tick callback once each round of the game.
    In this event you will do the main part of the work. However, note that you are in no way constrained to keep all your code 
    inside this one single function! As soon as you start implementing something more complex than hello world you should most likely
    start breaking out code into helper functions, modules or what ever floats your boat. See the section
    <a href="#technical-details">Technical Details</a> for more info on that.
</p>

<p>
    You register your tick callback by defining a property called tick on the object you pass to gosuArena.register and setting
    that property to the callback function. See <a href="#getting-started-example">the getting started example</a> to see what that
    looks like in code.
</p>

<p>
    GosuArena passes two arguments to your tick callback: <a href="#action-queue">actionQueue</a> and <a href="#bot-status">status</a>.
    Status contains information about your bot and the things it can see. Action queue is the object through which you tell gosuArena what
    your bot has decided to do.
</p>

<h4>OnHitByBullet</h4>

<p>
    If your bot is hit by a bullet fired from one of your opponents you will be notified through the onHitByBullet callback, if you have
    supplied one when registering your bot.
</p>

<p>
    GosuArena passes three arguments to your onHitByBullet callback: <a href="#action-queue">actionQueue</a>, <a href="#bot-status">status</a> and
    <a href="#onHitByBullet-eventArgs">eventArgs</a>.
</p>

<h5 id="onHitByBullet-eventArgs">OnHitByBullet Event Args</h5>

<p>
    When you are hit by a bullet there are a few things that might be interesting to know. For example, where did the bullet come frome?
    This information is passed to your onHitByBullet callback through the eventArgs parameter.
</p>

<p>
    The eventArgs object looks like this:
</p>

<pre class="prettyprint">
    {
        // This is the angle from which the bullet came. For example, if you have an enemy to the south east which
        // just hit you with a bullet the angle will be somewhere around 300 degrees (south-east).
        // The angle will always be between 0 and 360 degrees.
        // See the <a href="coordinate-system">coordinate system and angles</a> section for more details.
        angle
    };
</pre>

<h4>OnCollision</h4>

<p>
    If your bot collides with a wall or one of the other bots you will be notified through the onCollision callback, if one is supplied.
</p>

<p>
    GosuArena passes the two standard arguments to your onCollision callback: <a href="#action-queue">actionQueue</a> and <a href="#bot-status">status</a>.
</p>

<p>
    Here is an example of how to register a callback for the onCollision event:
</p>

<pre class="prettyprint">
    gosuArena.register({
        tick: function (actionQueue, status) { 
            // This gets called once every round
        },
        onCollision: function (actionQueue, status) {
            // This will be called when your bot collides with something else
        }
    });
</pre>

<h4>But... Shouldn't there Be More?</h4>

<p>
    You might be missing some event which you feel would make your life much better. One of those might be something along the lines of
    onEnemySpotted. There is currently no such event since you can get information about all bots which your bot can currently see through
    the seenEnemies and seenAllies properties of the <a href="#bot-status">status</a> object in the existing events. However, that event 
    might be added later if people feel strongly about it.
</p>

<p>
    If you have any ideas of events to add, feel free to submit your idea on the <a href="http://github.com/erikojebo/gosuarena/issues">GitHub issues page</a>
    or send a pull request if you feel like implementing it yourself.
</p>

<h3 id="bot-status">Bot Status</h3>

<p>
    To make your bot do something smart you need information about your bot, such as where it is and what it is looking at. 
    This information is represented by a status object. The status object is passed to all bot events.
</p>

<p>The status object looks like this:</p>

<pre class="prettyprint">
    {
        id, // The identifier for your bot

        // The identifier of your bot's team, if you are playing a team match.
        teamId, 

        position: {
            x,
            y,
            width,
            height,

            // The following properties are true if the bot is within 1 unit from
            // the corresponding wall
            isAtSouthWall,
            isAtNorthWall,
            isAtWestWall,
            isAtEastWall
        },
        arena: {
            width, // The width of the playing field
            height // The height of the playing field
        }
        angle, // The angle of your bot. A value between 0 and 360 degrees where 0 degrees is south.

        // The direction of the bot is a vector which indicate which direction the bot moved during its
        // latest round. So, if the bot moved one unit north during the latest round the vector will be { x: 0, y: -1 },
        // since the positive direction of the y axis is from the top to the bottom of the screen.
        // If the bot moved both north and west (1 unit each) the vector will be { x: -1, y: -1 }, and if the bot
        // moved two units east the vector would be { x: 2, y: 0 }.
        // Since the vector is the total movement vector of the bot during the latest round it can be used 
        // to determine both in which direction a bot is moving (the angle of the vector) and the speed with 
        // which it is moving (the length of the vector).
        direction: {
            x,
            y
        },

        // Remaining health (hit points) for the bot. The bot hass 100 hp when the match starts.
        // At 0 hp the bot is killed
        health,

        // The number of actions that the bot can take during one round. For example, forward(1) would
        // be one action. forward(2) would be 2 actions, and forward(1) followed by turn(1) would be 
        // two actions in total.
        actionsPerRound,

        // An array of <a href="#bot-status">bot status</a> objects representing the enemy bots your bot currently can see.
        // In an FFA match, all other bots are considered enemies. In a team match, all bots on other teams are considered
        // enemies.
        // The line of sight of the bot is a thin, straight line from the sight and forward so you can only see bots
        // on which your bot has aimed its gun.
        seenEnemies, 

        // An array of <a href="#bot-status">bot status</a> objects representing the allied bots your bot currently can see.
        // This property is only used during team matches. Bots on the same team as the current bot are considered allies.
        // The line of sight of the bot is a thin, straight line from the sight and forward so you can only see bots
        // on which your bot has aimed its gun.
        seenAllies,

        canFire: function () { ... },  // True if the weapon is ready for firing, false if the weapon is still cooling down
        roundsUntilWeaponIsReady, // The number of rounds remaining until the weapon is ready to fire

        // The following functions return true if the bot is able to perform the
        // corresponding movement action. If they return false that means that the bot
        // is blocked by something, such as another bot or a wall.
        canMoveForward: function () { ... },
        canMoveBack: function () { ... },
        canMoveNorth: function () { ... },
        canMoveSouth: function () { ... },
        canMoveEast: function () { ... },
        canMoveWest: function () { ... },

        // Note that since the bot is rectangular and turns around its own center
        // it is unable to turn if it is very close to any of the walls.
        // You need to get a few units of space around the bot to ensure that is
        // can turn without colliding with anything
        canTurnLeft,
        canTurnRight,
    }

</pre>

<h4>Seen Enemies / Allies</h4>

<p>
    As mentioned above, as a part of the <a href="#bot-status">bot status</a> object there 
    are two arrays containing the bots that your own bot currently can see. The objects in the 
    seenEnemies/seenAllies array are themselves bot status objects, so you can get quite a lot of information
    about the bots you can see, which can help your bot make intelligent decisions. For example,
    your bot can look at the position and direction of the bot to guess where the bot will be in
    a few turns, so that it can fire at that point rather than at the point where the opponent
    currently is located.
</p>

<h3 id="action-queue">Action Queue</h3>

<p>
    To make your bot do something useful you add actions to the action queue.
    Each round actions are taken from the queue and executed.
</p>

<p class="alert alert-warning">
    <i class="fa fa-warning"></i>    
    Since actions are added to a queue the bot will not automatically perform the actions
    you added to the queue during, for example, the tick event, since there might be other
    actions on the queue already which will be performed first.

    <br />
    <br />
    
    If you want to do something as soon as possible, for example if you want to move sideways
    when receiving the OnHitByBullet event without first performing the actions already on the
    queue you have to clear the queue first.
    
    <br />
    <br />

    To clear the queue you simply call the clear method of the action queue.
</p>

<p>
    The action queue object looks like this:
</p>

<pre class="prettyprint">
    {
        // The following methods adds movement actions to the queue.
        // The units argument specifies the number of units to move in
        // the given direction.
        // Depending on the number of units specified the bot might
        // need several rounds to complete the action.
        north:   function (units) { ... },
        south:   function (units) { ... },
        west:    function (units) { ... },
        east:    function (units) { ... },
        forward: function (units) { ... },
        back:    function (units) { ... },
        left:    function (units) { ... },
        right:   function (units) { ... },
    
        // Turns the given number of degrees.
        // Depending on the number of degrees specified the bot might
        // need several rounds to complete the action.        
        // Degrees can be positive or negative.
        turn: function (degrees) { ... },
    
        // Fires a bullet, if the gun is ready to fire
        fire: function () { ... },  
    
        clear: function () { ... }, // Removes all actions added to the queue but that have not yet been executed
        isEmpty: function () { ... },
        length: function () { ... } // Returns the number of queued actions
    };
</pre>

<h3 id="coordinate-system">Coordinate System and Angles</h3>

<p>
    The coordinate system of the playing field is such that the point (0, 0) is located in the upper left hand
    corner of the field. The x asis is positive going from left to right, which means greater x value the further
    o the right your bot moves. The y axis is positive going from the top to the bottom, so greater y value the further 
    towards the bottom the bot moves.
</p>

<p>
    When your bot has the angle 0 degrees it is facing along the positive y axis, i.e. down/south. 90 degrees
    is left/west, 180 degrees is up/north and 270 degrees is right/east. Your bot can have any angle
    between 0 and 360 degrees (or actually between 0 and 359.999999..., but you get the picture). 
    If you turn by -1 degree when at 0 degrees you will end up at 359 degrees.
    On the same note, if you rotate 1 degree when at 359 degrees you will end up at 0 degrees.
</p>

<h3 id="debugging">Debugging Your Bot</h3>

<p>
    This section gives an introduction to how you can approach debugging your bot AI.
</p>

<p>
    Your bot script is rendered in a scrpit tag as a part of the page when playing a game. This enables you
    to use the dev tools in your favorite browser to debug your script. Note that the script is included in the
    actual page and not in a separate script file. This works fine to debug using Chrome Dev Tools.
    Look for a script block with a comment including the name of your bot to find your code.
</p>

<img src="@Url.Content("~/Content/images/docs/chrome_devtools_debug_find_bot.png")" alt="The code for your bot is embedded in the main page and can be found by using the source tab of your dev tools and searching for the name of your bot" />

<p>
    When you have found the code for your bot you can go ahead and set breakpoints just like you would for any
    other JavaScript code.
</p>

<img src="@Url.Content("~/Content/images/docs/chrome_devtools_debug_breakpoints.png")" alt="The code for your bot is embedded in the main page and can be found by using the source tab of your dev tools and searching for the name of your bot" />

<p>
    However, keep in mind that your function is called many times per second, so you have to be a bit creative
    with your debugging. If you are interested in a given condition, add an if statement and put the break
    point in the if statement body, even if you don't actually need the if statement itself.
</p>

<h5>Debugging Position Dependent Behavior</h5>

<p>
    Sometimes you might have problems when your bot gets to a certain spot on the playing field, such as
    when it is facing a wall or something like that. To make debugging such scenarios easier you can
    set the starting position and angle of the bot when playing training matches. Matches launched from the
    bot editing page are considered training matches.
</p>

<p>
    Here is an example of how to configure the starting position for training games:
</p>

<pre class="prettify">
  gosuArena.register({
    tick: function (actionQueue, status) {
        // Bot logic goes here...
    },
    // You specify the training starting position as a property on the options object,
    // which in turn is a property on the object passed to the register method.
    options: {
        startPosition: {
            x: 100,
            y: 100,
            angle: 45
        }
    }
});
</pre>

<h3 id="team-games">Team Games</h3>

<p>
    Bot arena has two major game modes, 1v1 and team games. In a team game you can set up
    up to four separate teams with a number of bots in each team. It is then up to you to
    keep track of which bots are friends and which are enemies (see the 
    <a href="#bot-status">bot status</a> section for more info).
</p>

<p class="alert alert-warning">
    Note that friendly fire is ON, so you better hold your fire when spotting a friendly bot
    out there on the battle field.
</p>


<h3 id="technical-details">Technical Details</h3>

<p>
    In this section you can read about a few technical details which might be of interest when you are
    developing your bot. If you just want to go ahead and start coding, feel free to skip this part. But
    you might want to return to this section when you've written some code and feel confused about something
    around how your script is executed.
</p>

<h4>Globals and Scoping</h4>

<p>
    GosuArena has redefined a couple of globals in the context where your script is executed. Window, 
    document and alert are redefined to be empty JavaScript objects to avoid some of the worst nastiness.
</p>

<p>
    Your script will be executed within a function scope, so anything that you define in the root of your
    script will still be local to that function scope. Hence, you will not have naming conflicts with other bots
    and will not pollute the global namespace if you define stuff that looks like globals in your script.
</p>

<p>
    GosuArena is structured so that you are free to organize the code within your script in what ever way 
    you feel is best, as long as you call gosuArena.register and pass in an object with a tick property.
</p>

<h3 id="private-bots">Public and Private Bots</h3>

<p>
    At times you might want to keep you friends from seeing your bot, such as just before a tournament.
    This can be done by making your bot private. No other user can see your private bots so they will
    not be able to study your bot by playing matches against it. On the flip side, you will not be able
    to play bots written by other users. You will, however, be able to play matches agains the trainer 
    bots as well as your own bots.
</p>

<p>
    Private bots can be very handy when you are working on your secret super tactics, but makes training
    a little harder, since you can't play against any real enemy bots written by others.
</p>

<p>
    To make a bot private go to the edit page for the bot. Above the code editor there is a checkbox 
    labeled "Make bot avaible for playing with bots written by other players". Uncheck this checkbox
    and save your bot.
</p>

<p>
    To make your bot public again, go to the edit page once again, check the checkbox again and save 
    the bot. Your bot will now appear in the bot list and you will be able to play matches against 
    any other public bot.
</p>

<h3 id="game-performance">Game Performance (FPS)</h3>

<p>
    If the match appears sluggish when watching the bots duke it you can open the developer tools
    of you browser (F12) and check the logged FPS there. You should ideally be at 60 FPS. If you are
    running at ~30 FPS and you are running under Windows 7, you might consider checking if your
    computer running on battery and/or if it is using the "Balanced" power plan. If so, plugging in 
    the power supply or switching to the "High performance" power plan could improve your game
    performance significantly.
</p>
    
<p>
    You can change your power plan settings by clicking the battery icon in the lower right corner
    of your screen, or typing "Power options" into the start menu.
</p>

<img src="@Url.Content("~/Content/images/docs/high_performance.png")" alt="High performance power plan under Windows 7 can improve game performance" />

<h3 id="api">API Access</h3>

<p>
    If you want to write some tool to improve your bot development workflow you can access the 
    scripts of your bots through a simple REST API.
</p>

<p>
    Each of your bots is exposed as a resource at the URI http://gosuarena.erikojebo.se/api/bot/your-bot-id,
    so if your bot's id is 13 the URI would be http://gosuarena.erikojebo.se/api/bot/13.
</p>

<h4>Authorization</h4>

<p>The first thing you have to do to enable API access to your bots is to go to your profile and click the Enable button in the Api Access section.</p>

<img src="@Url.Content("~/Content/images/docs/profile_enable_api_access.png")" alt="Enabling API access on your user profile" />

<p>You then need to generate an API key, by clicking the "Regenerate key" button. You can then click the "show" link to show the generated key</p>

<img src="@Url.Content("~/Content/images/docs/profile_show_api_key.png")" alt="Showing your API key on your user profile" />

<img src="@Url.Content("~/Content/images/docs/profile_after_show_api_key.png")" alt="Showing your API key on your user profile" />

<p>
    To make sure your requests are accepted you need to include an Authorization request header. The value of the header must be the string
    GosuArenaApiKey followed by a space and then your key:
</p>

<pre class="prettyprint">
    Authorization: GosuArenaApiKey f568d28a-8280-459d-a21d-80fd82b6cab2
</pre>

<h4>Downloading Your Script</h4>

<p>
    To download the script of one of your bots you simply issue a GET request to the URI of your bot.
    Here is an example of how it could look in Fiddler:
</p>

<img src="@Url.Content("~/Content/images/docs/bot_api_get_request.png")" alt="Example of a GET request to dowload the script of a bot through the REST API" />

<h4>Uploading a New Version of a Script</h4>

<p>
    To upload a new version of the script for one of your bots you issue a PUT request to the URI of your bot.
    Here is an example:
</p>

<img src="@Url.Content("~/Content/images/docs/bot_api_put_request.png")" alt="Example of a PUT request to upload a new script for a bot through the REST API" />

<h4>Troubleshooting</h4>

<p>If you get a 404 Not found your URI does not point to any existing bot. You have probably specified the wrong id.</p>
<p>
    If you get a 401 Unauthorized your have not supplied an Authorization header with a key matching the one found on your
    user profile, or perhaps you have not enabled API access.
</p>

<p class="conclusion">
    That is just about it. Now go forth and be awesome!
</p>

<script src="@Url.Content("~/Content/lib/google-code-prettify/run_prettify.js")"></script>